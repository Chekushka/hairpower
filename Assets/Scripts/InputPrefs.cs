//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/InputPrefs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputPrefs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputPrefs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputPrefs"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""8768805d-c805-4e0e-a79a-68c79fe52d4f"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""Button"",
                    ""id"": ""feacffe8-d038-4e17-be42-2abdde34cd10"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ForwardMoveStarted"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4af80590-9a4b-4e0c-a6c0-5f444af6c1bf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ForwardMoveEnded"",
                    ""type"": ""PassThrough"",
                    ""id"": ""98728b31-8a8f-443d-8e0d-a0e922af7e21"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""895c8968-beda-4e58-980a-a854e0e4af9e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7038a283-f23e-464d-855b-c864cfff9ff9"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardMoveStarted"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d7fbd7a-71dd-4838-9400-51d97767ad98"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardMoveEnded"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a00bcbf3-1e08-4f4d-8d22-eefce68c4a10"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e047d96c-f73e-4cda-bace-f29118df0010"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Touch
        m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
        m_Touch_Tap = m_Touch.FindAction("Tap", throwIfNotFound: true);
        m_Touch_ForwardMoveStarted = m_Touch.FindAction("ForwardMoveStarted", throwIfNotFound: true);
        m_Touch_ForwardMoveEnded = m_Touch.FindAction("ForwardMoveEnded", throwIfNotFound: true);
        m_Touch_TouchPosition = m_Touch.FindAction("TouchPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touch
    private readonly InputActionMap m_Touch;
    private ITouchActions m_TouchActionsCallbackInterface;
    private readonly InputAction m_Touch_Tap;
    private readonly InputAction m_Touch_ForwardMoveStarted;
    private readonly InputAction m_Touch_ForwardMoveEnded;
    private readonly InputAction m_Touch_TouchPosition;
    public struct TouchActions
    {
        private @InputPrefs m_Wrapper;
        public TouchActions(@InputPrefs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tap => m_Wrapper.m_Touch_Tap;
        public InputAction @ForwardMoveStarted => m_Wrapper.m_Touch_ForwardMoveStarted;
        public InputAction @ForwardMoveEnded => m_Wrapper.m_Touch_ForwardMoveEnded;
        public InputAction @TouchPosition => m_Wrapper.m_Touch_TouchPosition;
        public InputActionMap Get() { return m_Wrapper.m_Touch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        public void SetCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterface != null)
            {
                @Tap.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnTap;
                @Tap.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnTap;
                @Tap.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnTap;
                @ForwardMoveStarted.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnForwardMoveStarted;
                @ForwardMoveStarted.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnForwardMoveStarted;
                @ForwardMoveStarted.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnForwardMoveStarted;
                @ForwardMoveEnded.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnForwardMoveEnded;
                @ForwardMoveEnded.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnForwardMoveEnded;
                @ForwardMoveEnded.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnForwardMoveEnded;
                @TouchPosition.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchPosition;
            }
            m_Wrapper.m_TouchActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Tap.started += instance.OnTap;
                @Tap.performed += instance.OnTap;
                @Tap.canceled += instance.OnTap;
                @ForwardMoveStarted.started += instance.OnForwardMoveStarted;
                @ForwardMoveStarted.performed += instance.OnForwardMoveStarted;
                @ForwardMoveStarted.canceled += instance.OnForwardMoveStarted;
                @ForwardMoveEnded.started += instance.OnForwardMoveEnded;
                @ForwardMoveEnded.performed += instance.OnForwardMoveEnded;
                @ForwardMoveEnded.canceled += instance.OnForwardMoveEnded;
                @TouchPosition.started += instance.OnTouchPosition;
                @TouchPosition.performed += instance.OnTouchPosition;
                @TouchPosition.canceled += instance.OnTouchPosition;
            }
        }
    }
    public TouchActions @Touch => new TouchActions(this);
    public interface ITouchActions
    {
        void OnTap(InputAction.CallbackContext context);
        void OnForwardMoveStarted(InputAction.CallbackContext context);
        void OnForwardMoveEnded(InputAction.CallbackContext context);
        void OnTouchPosition(InputAction.CallbackContext context);
    }
}
